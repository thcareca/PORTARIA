import sqlite3
import time
import re

# Conectar ao banco de dados SQLite (arquivo persistente)
conn = sqlite3.connect('visitantes.db')  # Cria ou usa um arquivo chamado visitantes.db
c = conn.cursor()

# Criar tabela para visitantes
c.execute('''
CREATE TABLE IF NOT EXISTS visitantes (
   id INTEGER PRIMARY KEY,
   nome TEXT,
   cpf TEXT UNIQUE, -- CPF deve ser único
   placa TEXT NULL,
   meio_locomocao INTEGER, -- 1: andando, 2: veículo motorizado, 3: veículo não motorizado
   entrada TIMESTAMP,
   saida TIMESTAMP
)
''')
conn.commit()

# Função para validar a placa do automóvel
def validar_placa(placa):
    if not placa:  # Caso o visitante não tenha fornecido placa
        return True
    padrao = r'^[A-Z]{3}\d[A-Z]\d{2}$'  # Regex para formato de placa
    return re.match(padrao, placa) is not None

# Função para validar CPF
def validar_cpf(cpf):
    cpf = re.sub(r'\D', '', cpf)  # Remove caracteres não numéricos
    if len(cpf) != 11 or not cpf.isdigit() or cpf == cpf[0] * 11:
        return False
    def calcular_digito(cpf, peso):
        soma = sum(int(d) * peso for d, peso in zip(cpf[:peso-1], range(peso, 1, -1)))
        digito = 11 - (soma % 11)
        return digito if digito < 10 else 0
    return cpf[-2:] == f"{calcular_digito(cpf, 10)}{calcular_digito(cpf, 11)}"

# Função para verificar duplicidade de CPF
def verificar_cpf_existente(cpf):
    c.execute("SELECT cpf FROM visitantes WHERE cpf = ?", (cpf,))
    return c.fetchone() is not None

# Função para registrar entrada de visitante
def registrar_entrada(nome, cpf, placa, meio_locomocao):
    entrada = time.time()
    try:
        c.execute("INSERT INTO visitantes (nome, cpf, placa, meio_locomocao, entrada) VALUES (?, ?, ?, ?, ?)", 
                  (nome, cpf, placa if placa else None, meio_locomocao, entrada))
        conn.commit()
        print(f"Visitante {nome} registrado na entrada.")
        salvar_em_txt(nome, cpf, placa, meio_locomocao, "Entrada", entrada)
    except sqlite3.IntegrityError:
        print("Erro: CPF duplicado. O visitante já está registrado.")

# Função para registrar saída de visitante
def registrar_saida(nome):
    saida = time.time()
    c.execute("UPDATE visitantes SET saida = ? WHERE nome = ? AND saida IS NULL", 
              (saida, nome))
    conn.commit()
    print(f"Visitante {nome} registrado na saída.")
    salvar_em_txt(nome, None, None, None, "Saída", saida)

# Função para salvar os registros no arquivo .txt
def salvar_em_txt(nome, cpf, placa, meio_locomocao, tipo, timestamp):
    with open('registros_visitantes.txt', 'a') as f:
        entrada_saida = "Entrada" if tipo == "Entrada" else "Saída"
        meio_locomocao_desc = {1: "andando", 2: "veículo motorizado", 3: "veículo não motorizado"}.get(meio_locomocao, "desconhecido")
        f.write(f"{entrada_saida}: Nome: {nome}, CPF: {cpf if cpf else 'N/A'}, Placa: {placa if placa else 'N/A'}, "
                f"Meio de Locomoção: {meio_locomocao_desc}, Hora: {time.ctime(timestamp)}\n")

# Função para listar visitantes
def listar_visitantes():
    c.execute("SELECT * FROM visitantes")
    visitantes = c.fetchall()
    for visitante in visitantes:
        meio_locomocao_desc = {1: "andando", 2: "veículo motorizado", 3: "veículo não motorizado"}.get(visitante[4], "desconhecido")
        entrada_str = "Data inválida"
        saida_str = "Ainda presente"

        try:
            entrada_str = time.ctime(float(visitante[5])) if visitante[5] else "Data inválida"
        except (TypeError, ValueError):
            entrada_str = "Data inválida"

        try:
            saida_str = time.ctime(float(visitante[6])) if visitante[6] else "Ainda presente"
        except (TypeError, ValueError):
            saida_str = "Ainda presente"

        print(f"ID: {visitante[0]}, Nome: {visitante[1]}, CPF: {visitante[2]}, Placa: {visitante[3] if visitante[3] else 'N/A'}, "
              f"Meio de Locomoção: {meio_locomocao_desc}, Entrada: {entrada_str}, Saída: {saida_str}")

# Exemplo de uso
if __name__ == "__main__":
    try:
        while True:
            nome = input("Digite o nome do visitante (ou 'sair' para encerrar): ")
            if nome.lower() == 'sair':
                break
            
            while True:
                cpf = input("Digite o CPF do visitante (apenas números, 11 dígitos): ")
                if validar_cpf(cpf):
                    if verificar_cpf_existente(cpf):
                        print("Erro: CPF já está registrado. Por favor, insira outro CPF.")
                    else:
                        break
                else:
                    print("CPF inválido! Por favor, insira um CPF válido.")

            # Perguntar sobre o meio de locomoção
            while True:
                meio_locomocao = input("O visitante está (1) andando, (2) de veículo motorizado ou (3) de veículo não motorizado? Escolha: ")
                if meio_locomocao in ['1', '2', '3']:
                    meio_locomocao = int(meio_locomocao)  # Converter para número inteiro
                    if meio_locomocao == 2:  # Veículo motorizado exige placa
                        placa = input("Digite a placa do veículo (formato: ABC1D23): ")
                        if validar_placa(placa):
                            break
                        else:
                            print("Placa inválida! Tente novamente.")
                    else:  # Sem necessidade de placa
                        placa = None
                        break
                else:
                    print("Escolha inválida! Por favor, escolha uma opção válida.")

            registrar_entrada(nome, cpf, placa, meio_locomocao)
            print("\nVisitantes registrados:")
            listar_visitantes()

            registrar_saida_input = input("Deseja registrar a saída de algum visitante? (sim/não): ")
            if registrar_saida_input.lower() == 'sim':
                nome_saida = input("Digite o nome do visitante para registrar a saída: ")
                registrar_saida(nome_saida)
            
        print("Encerrando o sistema...")
    except KeyboardInterrupt:
        print("\nInterrupção detectada. Sistema encerrado com segurança.")

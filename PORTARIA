import sqlite3
import time
import re

# Conectar ao banco de dados SQLite (arquivo persistente)
conn = sqlite3.connect('visitantes.db')  # Cria ou usa um arquivo chamado visitantes.db
c = conn.cursor()

# Garantir que a tabela tenha a coluna 'tipo'
try:
    c.execute('ALTER TABLE visitantes ADD COLUMN tipo INTEGER')  # 1: morador, 2: visitante, 3: prestador de serviço, 4: funcionário
    conn.commit()
except sqlite3.OperationalError:
    pass  # A coluna já existe, pode continuar normalmente

# Criar tabela para visitantes (caso ainda não exista)
c.execute('''
CREATE TABLE IF NOT EXISTS visitantes (
   id INTEGER PRIMARY KEY,
   tipo INTEGER, -- 1: morador, 2: visitante, 3: prestador de serviço, 4: funcionário
   nome TEXT,
   cpf TEXT UNIQUE, -- CPF deve ser único
   placa TEXT UNIQUE, -- Placa deve ser única
   meio_locomocao INTEGER, -- 1: andando, 2: veículo motorizado, 3: veículo não motorizado
   entrada TIMESTAMP,
   saida TIMESTAMP
)
''')
conn.commit()

# Função para validar CPF
def validar_cpf(cpf):
    cpf = re.sub(r'\D', '', cpf)  # Remove caracteres não numéricos
    if len(cpf) != 11 or not cpf.isdigit() or cpf == cpf[0] * 11:
        return False
    def calcular_digito(cpf, peso):
        soma = sum(int(d) * peso for d, peso in zip(cpf[:peso-1], range(peso, 1, -1)))
        digito = 11 - (soma % 11)
        return digito if digito < 10 else 0
    return cpf[-2:] == f"{calcular_digito(cpf, 10)}{calcular_digito(cpf, 11)}"

# Função para validar placa
def validar_placa(placa):
    if not placa:  # Caso a pessoa não tenha fornecido placa
        return True
    padrao = r'^[A-Z]{3}\d[A-Z]\d{2}$'  # Regex para formato de placa
    if not re.match(padrao, placa):  # Validar formato da placa
        return False
    if verificar_duplicidade("placa", placa):  # Verificar duplicidade de placa
        print("Erro: Placa duplicada. Por favor, insira outra placa.")
        return False
    return True

# Função para verificar duplicidade de CPF ou placa
def verificar_duplicidade(coluna, valor):
    c.execute(f"SELECT {coluna} FROM visitantes WHERE {coluna} = ?", (valor,))
    return c.fetchone() is not None

# Função para registrar entrada
def registrar_entrada(tipo, nome, cpf, placa, meio_locomocao):
    entrada = time.time()
    try:
        c.execute(
            "INSERT INTO visitantes (tipo, nome, cpf, placa, meio_locomocao, entrada) VALUES (?, ?, ?, ?, ?, ?)",
            (tipo, nome, cpf, placa if placa else None, meio_locomocao, entrada)
        )
        conn.commit()
        tipo_desc = {1: "morador", 2: "visitante", 3: "prestador de serviço", 4: "funcionário do condomínio"}.get(tipo, "desconhecido")
        print(f"{nome} registrado como {tipo_desc}.")
        salvar_em_txt(tipo, nome, cpf, placa, meio_locomocao, "Entrada", entrada)
    except sqlite3.IntegrityError:
        print("Erro: Dados duplicados ou inválidos. Não foi possível registrar.")

# Função para registrar saída
def registrar_saida(nome):
    saida = time.time()
    c.execute("UPDATE visitantes SET saida = ? WHERE nome = ? AND saida IS NULL", (saida, nome))
    conn.commit()
    print(f"{nome} registrado na saída.")
    salvar_em_txt(None, nome, None, None, None, "Saída", saida)

# Função para salvar registros em arquivo .txt
def salvar_em_txt(tipo, nome, cpf, placa, meio_locomocao, tipo_registro, timestamp):
    with open('registros_visitantes.txt', 'a') as f:
        meio_locomocao_desc = {1: "andando", 2: "veículo motorizado", 3: "veículo não motorizado"}.get(meio_locomocao, "desconhecido")
        tipo_desc = {1: "morador", 2: "visitante", 3: "prestador de serviço", 4: "funcionário do condomínio"}.get(tipo, "desconhecido")
        entrada_saida = "Entrada" if tipo_registro == "Entrada" else "Saída"
        f.write(f"{entrada_saida}: Tipo: {tipo_desc}, Nome: {nome}, CPF: {cpf if cpf else 'N/A'}, Placa: {placa if placa else 'N/A'}, "
                f"Meio de Locomoção: {meio_locomocao_desc}, Hora: {time.ctime(timestamp)}\n")

# Função para listar visitantes
def listar_visitantes():
    c.execute("SELECT * FROM visitantes")
    visitantes = c.fetchall()
    for visitante in visitantes:
        tipo_desc = {1: "morador", 2: "visitante", 3: "prestador de serviço", 4: "funcionário do condomínio"}.get(visitante[1], "desconhecido")
        meio_locomocao_desc = {1: "andando", 2: "veículo motorizado", 3: "veículo não motorizado"}.get(visitante[5], "desconhecido")
        entrada_str = time.ctime(float(visitante[6])) if visitante[6] else "Data inválida"
        saida_str = time.ctime(float(visitante[7])) if visitante[7] else "Ainda presente"
        print(f"ID: {visitante[0]}, Tipo: {tipo_desc}, Nome: {visitante[2]}, CPF: {visitante[3]}, Placa: {visitante[4] if visitante[4] else 'N/A'}, "
              f"Meio de Locomoção: {meio_locomocao_desc}, Entrada: {entrada_str}, Saída: {saida_str}")

# Loop principal
if __name__ == "__main__":
    try:
        while True:
            print("Opções de tipo:")
            print("(1) Morador")
            print("(2) Visitante")
            print("(3) Prestador de Serviço")
            print("(4) Funcionário do Condomínio")
            tipo = int(input("Escolha o tipo da pessoa: "))
            if tipo not in [1, 2, 3, 4]:
                print("Tipo inválido. Tente novamente.")
                continue

            nome = input("Digite o nome da pessoa (ou 'sair' para encerrar): ")
            if nome.lower() == 'sair':
                break

            while True:
                cpf = input("Digite o CPF da pessoa (apenas números, 11 dígitos): ")
                if validar_cpf(cpf) and not verificar_duplicidade("cpf", cpf):
                    break
                print("CPF inválido ou já registrado. Por favor, insira um CPF válido.")

            meio_locomocao = int(input("A pessoa está (1) andando, (2) de veículo motorizado ou (3) de veículo não motorizado? Escolha: "))
            placa = input("Digite a placa do veículo (formato: ABC1D23): ") if meio_locomocao == 2 else None
            if meio_locomocao == 2 and not validar_placa(placa):
                print("Placa inválida ou duplicada. Tente novamente.")
                continue

            registrar_entrada(tipo, nome, cpf, placa, meio_locomocao)
            print("\nPessoas registradas:")
            listar_visitantes()

            if input("Deseja registrar a saída de alguém? (sim/não): ").lower() == 'sim':
                registrar_saida(input("Digite o nome para registrar a saída: "))

        print("Encerrando o sistema...")
    except KeyboardInterrupt:
        print("\nInterrupção detectada. Sistema encerrado com segurança.")

import sqlite3
import time
import re

# Conectar ao banco de dados SQLite (arquivo persistente)
conn = sqlite3.connect('condominio.db')
c = conn.cursor()

# Criar tabela para cadastro unificado (caso ainda não exista)
c.execute('''
CREATE TABLE IF NOT EXISTS cadastro (
    id INTEGER PRIMARY KEY,
    tipo INTEGER, -- 1: morador, 2: visitante, 3: prestador de serviço, 4: funcionário
    nome TEXT NOT NULL,
    cpf TEXT UNIQUE NOT NULL, -- CPF deve ser único
    unidade TEXT, -- Unidade/Apartamento
    placa TEXT UNIQUE, -- Placa do veículo (opcional e única)
    data_nascimento TEXT, -- Apenas para moradores
    funcao TEXT, -- Apenas para funcionários
    meio_locomocao INTEGER, -- 1: andando, 2: veículo motorizado, 3: veículo não motorizado
    entrada TIMESTAMP, -- Horário de entrada
    saida TIMESTAMP -- Horário de saída
)
''')
conn.commit()

# Função para validar CPF
def validar_cpf(cpf):
    cpf = re.sub(r'\D', '', cpf)  # Remove caracteres não numéricos
    if len(cpf) != 11 or not cpf.isdigit() or cpf == cpf[0] * 11:
        return False
    def calcular_digito(cpf, peso):
        soma = sum(int(d) * peso for d, peso in zip(cpf[:peso-1], range(peso, 1, -1)))
        digito = 11 - (soma % 11)
        return digito if digito < 10 else 0
    return cpf[-2:] == f"{calcular_digito(cpf, 10)}{calcular_digito(cpf, 11)}"

# Função para verificar duplicidade de CPF ou placa
def verificar_duplicidade(coluna, valor):
    c.execute(f"SELECT {coluna} FROM cadastro WHERE {coluna} = ?", (valor,))
    return c.fetchone() is not None

# Função para registrar entrada
def registrar_entrada(tipo, nome, cpf, unidade, placa, meio_locomocao):
    entrada = time.time()
    try:
        c.execute(
            "INSERT INTO cadastro (tipo, nome, cpf, unidade, placa, meio_locomocao, entrada) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (tipo, nome, cpf, unidade, placa if placa else None, meio_locomocao, entrada)
        )
        conn.commit()
        print(f"{nome} registrado com sucesso!")
    except sqlite3.IntegrityError:
        print("Erro: Dados duplicados ou inválidos. Não foi possível registrar.")

# Função para registrar saída
def registrar_saida(nome):
    saida = time.time()
    c.execute("UPDATE cadastro SET saida = ? WHERE nome = ? AND saida IS NULL", (saida, nome))
    conn.commit()
    print(f"{nome} registrado na saída.")

# Função para listar registros com filtros
def listar_registros(filtro=None):
    query = "SELECT * FROM cadastro"
    if filtro:
        query += f" WHERE {filtro}"
    c.execute(query)
    registros = c.fetchall()
    for registro in registros:
        tipo_desc = {1: "Morador", 2: "Visitante", 3: "Prestador de Serviço", 4: "Funcionário"}.get(registro[1], "Desconhecido")
        entrada_str = time.ctime(float(registro[8])) if registro[8] else "Não registrado"
        saida_str = time.ctime(float(registro[9])) if registro[9] else "Ainda presente"
        print(f"ID: {registro[0]}, Tipo: {tipo_desc}, Nome: {registro[2]}, Unidade: {registro[4]}, Entrada: {entrada_str}, Saída: {saida_str}")

# Função principal
def main():
    while True:
        print("\nSistema de Controle de Condomínio")
        print("(1) Registrar Entrada")
        print("(2) Registrar Saída")
        print("(3) Listar Registros")
        print("(4) Sair")
        escolha = input("Escolha uma opção: ")

        if escolha == '1':
            print("\nRegistrar Entrada")
            print("(1) Morador")
            print("(2) Visitante")
            print("(3) Prestador de Serviço")
            print("(4) Funcionário")
            tipo = int(input("Escolha o tipo da pessoa: "))
            nome = input("Digite o nome: ")
            cpf = input("Digite o CPF: ")
            if not validar_cpf(cpf):
                print("CPF inválido.")
                continue
            unidade = input("Digite a Unidade/Apartamento (opcional): ") if tipo == 1 else None
            placa = input("Digite a placa do veículo (se aplicável): ")
            meio_locomocao = int(input("Meio de Locomoção (1: andando, 2: veículo motorizado, 3: não motorizado): "))
            registrar_entrada(tipo, nome, cpf, unidade, placa, meio_locomocao)

        elif escolha == '2':
            nome = input("Digite o nome para registrar a saída: ")
            registrar_saida(nome)

        elif escolha == '3':
            filtro = input("Digite um filtro SQL (opcional, exemplo: tipo = 1): ")
            listar_registros(filtro if filtro else None)

        elif escolha == '4':
            print("Encerrando o sistema...")
            break

        else:
            print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    main()
